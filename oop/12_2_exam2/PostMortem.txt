The default value of a static integer variable (or any static variable) in Java is
-0

Explanation:
Static variables are initialized with their default values when the class is loaded into memory, and for integers, the default value is 0.



4. Multiple inheritance means :
-A. one class inheriting from more super classes

Explanation:
When one class inherits from more than one superclass, it is known as multiple inheritance. Multiple inheritance allows a class to inherit the characteristics and behavior from multiple parent classes.


5. Which of the following is not true?
-An interface can implement another interface.

Explanation:
In Java, an interface cannot directly implement another interface. Instead, an interface can extend another interface using the extends keyword. This allows the child interface to inherit the methods and constants defined in the parent interface, along with any additional methods or constants it defines.



6. The fields in an interface are implicitly specified as :
- B. both static and final.

Explanation:
In Java, fields (also known as variables or constants) declared within an interface are implicitly treated as public, static, and final. Here's what these terms mean:

Public: Fields in an interface are accessible from any class that implements the interface.
Static: Fields are associated with the interface itself, rather than with instances of the implementing classes. They can be accessed using the interface name followed by the field name (e.g., InterfaceName.FIELD_NAME).
Final: Fields are constants and cannot be modified once assigned a value. They are effectively read-only.
It's important to note that starting from Java 8, interfaces can also have default methods and static methods in addition to fields. However, these methods are not relevant to the question.


7. Which of the following do not describe an Object
-A. An instance method
-C. An executable class in memory with the ability to store state
-D. The .class file created by the compile
-E. A .dat file

Explanation:
-A .dat file - This option does not inherently describe an object. A .dat file is a generic file extension and could represent any kind of data file. Whether it represents an object or not depends on the specific context and the contents of the file.
- An executable class in memory with the ability to store state - This statement is incorrect as it refers to a class, not an object. A class is a blueprint or template for creating objects, while an object is an instance of a class that can exist in memory and store state
- An instance method - An instance method is a behavior or operation that can be performed on an object. It belongs to a specific instance of a class and operates on the state of that instance.
-The .class file created by the compile - Option D describes the compiled bytecode file generated by the compiler, which represents the structure and behavior of a class. It is not an object itself, but rather a file containing the information needed to create objects of that class.




8. True or False. A class can also be referred to as an object.
-B. False

A class and an object are distinct entities in object-oriented programming.

In Java, a class is a blueprint or template that defines the structure, behavior, and properties of objects. It is a blueprint that describes how objects of that class should be created and what operations can be performed on them.

On the other hand, an object is an instance of a class. It is a concrete realization of the class blueprint. When you create an object, you are creating a specific instance of the class with its own set of data and behavior.

So, while a class defines the structure and behavior of objects, it is not an object itself. Therefore, a class cannot be referred to as an object.

Hence, the correct answer is B. False.




18. Which of the following is/true about an interface.
-B. The abstract methods in an interface are implicitly public

Explanation:
In Java, the abstract methods declared within an interface are implicitly public. This means that they are accessible from any class that implements the interface.

-D. A contract of public abstract methods that must be realized by the implementing class

Explanation
An interface in Java represents a contract or a set of rules that a class must adhere to if it implements that interface. It specifies a list of public abstract methods that the implementing class must provide implementations for.

-E. An interface can only contain public methods




23. We can have multiple classes in the same java file?
- True

Explanation:
-In Java, it is possible to have multiple classes in the same file under certain conditions. However, there are some rules that need to be followed:

At most one class in the file can be declared as public. The name of the file should match the name of the public class.
The file can contain any number of non-public classes in addition to the public class.
If there is a public class in the file, the name of the file should match the name of the public class.
Non-public classes can be accessed within the same file but cannot be accessed from other files.
Having multiple classes in the same Java file can be useful for organizing related classes, creating helper or utility classes, or defining private nested classes.

It's important to note that while having multiple classes in the same file is allowed, it is generally recommended to follow good coding practices and maintain a single class per file, especially for larger projects to enhance code readability and maintainability.




29. Which of the following is true about protected access modifier?
-Variables, methods, and constructors which are declared protected can be accessed by any class lying in the same package.

Explaination:
-Option 2 accurately describes the behavior of the protected access modifier in Java. When a variable, method, or constructor is declared as protected, it can be accessed by any class that belongs to the same package.


37. What is byte code in the context of Java?
-The type of code generated by a Java compiler.

Explanation:
In the context of Java, bytecode refers to the type of code generated by a Java compiler. When Java source code is compiled, it is transformed into platform-independent bytecode rather than native machine code.

Bytecode is an intermediate representation that can be executed by the Java Virtual Machine (JVM). It is a binary format consisting of instructions that the JVM can interpret and execute. Bytecode is not specific to any particular hardware or operating system, allowing Java programs to be portable and run on any system with a compatible JVM.

To summarize, bytecode is the compiled form of Java source code, generated by the Java compiler, which is then executed by the JVM.





38. Mark the incorrect statement from the following:
-Java is not a language for internet programming.

This statement is incorrect. Java is widely used for internet programming and has extensive support for developing web-based applications. Java provides libraries, frameworks, and technologies such as Java Servlets, JavaServer Pages (JSP), JavaServer Faces (JSF), and Java EE (Enterprise Edition) for building robust and scalable web applications.

-In java language error processing is built into the language
