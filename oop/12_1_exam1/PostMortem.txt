OOP  6.2 (Exam 1 - Objects and Classes)

4. A class loader performs the following functions.
-Loads classes into RAM

Explanaition:
-A class loader is responsible for loading classes into RAM, not objects. It locates and loads the bytecode of a class from the classpath and prepares it for execution in the Java Virtual Machine (JVM). Objects, on the other hand, are created based on classes and reside in the JVM's heap memory during runtime.


6. The following describes a Java Object
-An image based on a class loaded into memory

Explaination:
-A Java object is an instance of a class that is created and resides in memory during runtime. It is created based on a class definition and contains the state and behavior defined by that class. The object represents a specific entity or concept within a program and can interact with other objects through method invocations and data exchange.


7. Which of the following do not describe an Object:
-An instance method
-An executable class in memory with the ability to store state
-The $1.class file created by the compile
-A .dat file

Explaination:
The $1.class file created by the compiler: This typically refers to an anonymous inner class file generated by the Java compiler when using anonymous inner classes. It is not an object but rather a class file representing the implementation of the anonymous inner class.

A .dat file: A .dat file is a generic data file that can store various types of data, but it does not represent a Java object specifically. It is a file format used to store raw data and can be used by different applications for their specific purposes.



8. Which of the following statements are true?
interface X1{}
interface X2{}
class A{}
class B extends A implements X1{}
class C extends B implements X2{
	D d = D new();
}
class D{}

-C is-a A
-C is-a X1
-C is-a X2

Explanation:
C is-a A: Class C extends class B, which in turn extends class A. Therefore, class C is-a A.

C is-a X1: Class C implements interface X1. Since C implements all the methods defined in X1, it can be said that C is-a X1.

C is-a X2: Class C implements interface X2. Similar to the previous statement, since C implements all the methods defined in X2, it can be said that C is-a X2.




9. Which of the following statements is true?
-An object is an instance of a class

Explanation:
In Java, an object is created based on a class and represents a specific instance of that class. Objects encapsulate data and behavior defined by the class, allowing for state and functionality to be accessed and manipulated.


12. Which letters will be printed when the following program is run?
public class TestClass
{
    public static void main(String[] args)
    {
        B b = new C();
        A a = b;
        if(a instanceof A) System.out.println("A");
        if(a instanceof B) System.out.println("B");
        if(a instanceof C) System.out.println("C");
        if(a instanceof D) System.out.println("D");
    }
}

class A{}
class B extends A{}
class C extends B{}
class D extends C{}

-A will be printed
-B will be printed
-C will be printed

Explanation:
B b = new C();: An object of class C is created and assigned to a variable b of type B. This is allowed because C is a subclass of B.

A a = b;: The object referenced by b (of type C) is assigned to a variable a of type A. This is possible because C is also a subclass of A. This demonstrates polymorphism.

if(a instanceof A) System.out.println("A");: The instanceof operator checks if a is an instance of class A. Since a is referring to an object of type C, which is a subclass of A, the condition is true and "A" is printed.

if(a instanceof B) System.out.println("B");: The instanceof operator checks if a is an instance of class B. Since a is referring to an object of type C, which is a subclass of B, the condition is true and "B" is printed.

if(a instanceof C) System.out.println("C");: The instanceof operator checks if a is an instance of class C. Since a is referring to an object of type C, the condition is true and "C" is printed.

if(a instanceof D) System.out.println("D");: The instanceof operator checks if a is an instance of class D. Since a is not referring to an object of type D (it is referring to an object of type C), the condition is false and "D" is not printed.



13. Where, in a constructor, can you place a call to a super class' constructor?
-As the first statement in the constructor.

Explanation:
When calling a superclass' constructor, it must be the first statement in the constructor body to ensure that the superclass initialization is performed before the subclass initialization. This is because the superclass constructor initializes the inherited members of the subclass, and only after that can the subclass constructor proceed with its own initialization.


14. What will the following program print when compiled and run?
class Base{
    void methodA(){
        System.out.println("base - MethodA");
    }
}
class PostMortem extends Base
{
    void methodA(){
        System.out.println("sub - MethodA");
    }
    void methodB(){
        System.out.println("sub - MethodB");
    }
    public static void main(String[] args)
    {
        Base b = new Sub(); //1
        b.methodA(); //2
        b.methodB(); //3
    }
}

-Compile time error at //3

Explanation:
The given program will not compile successfully because the class Sub is not defined in the provided code.

In the statement Base b = new Sub(); at line 13, the code attempts to create an instance of class Sub, which is assumed to be a subclass of Base. However, there is no Sub class defined in the code snippet, resulting in a compilation error.

To make the code compile, you would need to define the Sub class, either as a separate class or as an extension of Base. Once the code is corrected and compiled, the output would depend on the implementation of methodA() and methodB() in the Sub class.



16. Which of the following are true about constructors in java?
-A constructor doesn’t have a return type.
-A constructor is called automatically when a new instance of an object is created.
-The name of the constructor must be the same as the name of the class.

Explanation:
A constructor doesn't have a return type: Constructors are special methods in a class used to initialize objects. They have the same name as the class and are invoked using the new keyword. Unlike other methods, constructors do not have a return type, not even void.

A constructor is called automatically when a new instance of an object is created: When a new object is created using the new keyword, the constructor corresponding to that class is automatically called. The constructor initializes the object and sets its initial state. It is invoked implicitly, without the need for explicit method calls.


18. Which of the following describe an interface.
-The default access modifier for methods in an interface is public
-A contract of public methods that must be realised by the implementing class.
-An interface can only contain public methods

Explanation:
A collection of methods that a class must implement: An interface in Java is a collection of method signatures that define a contract. A class that implements an interface must provide implementations for all the methods defined in the interface.


20. Which of the following are valid declarations inside an interface?
-void compute ( );
-public void compute ( );

Explanation:
public void compute();: This declaration defines a public method named compute without any return type. It is valid to have public methods in an interface.



22. “Java Beans” may be used for.
-Encapsulating data that represents state of an object
-Transporting data from one point to another
-May be used on an interface to specify expected data in or out


Explanation:
Encapsulating data that represents the state of an object: Java Beans is a programming convention and specification for creating reusable components in Java. It involves encapsulating data using private fields and providing public getter and setter methods to access and modify the state of the object. Java Beans are commonly used for encapsulating and managing the state of an object.

Transporting data from one point to another: Java Beans can be used for transporting data between different components or systems. By following the Java Beans convention, the data can be serialized and deserialized easily, allowing it to be transferred across networks or stored in persistent storage.


24. Which of these statements are legal?
 interface I1{}
        interface I2{}
        class C1 implements I1{}
        class C2 implements I2{}
        class C3 extends C1 implements I2{}
        C1 o1;
        C3 o2;
        C1 o3;

-class C4 extends C3 implements I1, I2 { }
-I1 i1 = o3; I2 i2 = (I2) i1
-I1 b = o3;

Explanation:
The variables o1, o2, and o3 are declared with types C1 and C3, which are legal since these types are defined in the code.


26. Which of the following statements are true?
-The extends keyword is used to specify inheritance
-subclass of an abstract class can be declared abstract


Explanation:
-The extends keyword is used to specify inheritance: In Java, the extends keyword is used to specify that a class is inheriting from another class. It establishes an "is-a" relationship between the subclass and the superclass, allowing the subclass to inherit the members and behavior of the superclass.
-A subclass of an abstract class can be declared abstract: It is possible to have an abstract subclass of an abstract class. An abstract subclass can either implement or override abstract methods from the abstract superclass or add its own abstract methods.
